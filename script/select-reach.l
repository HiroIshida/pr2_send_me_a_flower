#!/usr/bin/env roseus
(load "package://pr2eus/pr2-interface.l")
;(load "package://pr2eus_moveit/euslisp/pr2eus-moveit.l")
(load "util-ros.l")
(load "util-motion.l")
(load "util-eus.l")
(pr2-init)
;(send *ri* :set-moveit-environment (instance pr2-moveit-environment :init))

;(ros::roseus "reaching")
(ros::load-ros-manifest "jsk_recognition_msgs")
(ros::load-ros-manifest "pr2_send_flower")
(ros::load-ros-manifest "roseus")
(ros::roseus-add-msgs "pr2_gripper_sensor_msgs")

(defun wait-for-hand-impact (arm &key (timeout 30))
  (let* ((action-name (format nil "/~c_gripper_sensor_controller/event_detector" (if (eq arm :larm) #\l #\r)))
         (client (instance ros::simple-action-client :init action-name pr2_gripper_sensor_msgs::PR2GripperEventDetectorAction))
         (goal (instance pr2_gripper_sensor_msgs::PR2GripperEventDetectorActionGoal :init)))
    (unless (send client :wait-for-server 5)
      (return-from wait-for-hand-impact nil))
    (send goal :header :stamp (ros::time-now))
    (send goal :goal_id :stamp (ros::time-now))
    ;;(send goal :goal :command :trigger_conditions pr2_gripper_sensor_msgs::PR2GripperEventDetectorCommand::*FINGER_SIDE_IMPACT_OR_SLIP_OR_ACC*)
    (send goal :goal :command :trigger_conditions pr2_gripper_sensor_msgs::PR2GripperEventDetectorCommand::*FINGER_SIDE_IMPACT_OR_ACC*)
    ;;(send goal :goal :command :trigger_conditions pr2_gripper_sensor_msgs::PR2GripperEventDetectorCommand::*SLIP*)
    (send goal :goal :command :slip_trigger_magnitude 0.02)
    (send goal :goal :command :acceleration_trigger_magnitude 3.0) ;; m/s^2
    (send client :send-goal goal)
    (ros::ros-info "wait for touching robot hand")
    (send client :wait-for-result :timeout timeout))
  )

(print "finish loading")

(print "robot initialized")
(setq *tfl* (instance ros::transform-listener :init))
;(setq *co* (instance collision-object-publisher :init))
(load "ishida-pr2-init.l")
(unix:sleep 4)

(defun get-pos-flower ()
  (ros::wait-for-service "pos_reach_service")
  (setq req (instance pr2_send_flower::ReachPointRequest :init))
  (setq res (ros::service-call "pos_reach_service" req))
  (float-vector 
    (* (send res :position :x) 1000)
    (* (send res :position :y) 1000)
    (* (send res :position :z) 1000)
    )
  )

(setq pos-reach (v+ (get-pos-flower) #f(0 50 -10)))
(solve-ik! *robot* pos-reach #f(-1.57 0.0 0) :larm :rotation-axis t)
(transmit-posture *robot*)
(send *ri* :stop-grasp)
(send *ri* :wait-interpolation)

(setq pos-reach (v+ pos-reach #f(0 -55 0)))
(solve-ik! *robot* pos-reach #f(-1.57 0.0 0) :larm :rotation-axis t)
(transmit-posture *robot*)
(send *ri* :start-grasp)
(send *ri* :wait-interpolation)

(setq pos-reach (v+ pos-reach #f(0 0 150)))
(solve-ik! *robot* pos-reach #f(-1.57 0.0 0) :larm :rotation-axis t)
(transmit-posture *robot*)
(setq pos-reach (v+ pos-reach #f(0 120 0)))
(solve-ik! *robot* pos-reach #f(-1.57 0.0 0) :larm :rotation-axis t)
(transmit-posture *robot*)
(setq pos-reach (v+ pos-reach #f(400 0 0)))
(solve-ik! *robot* pos-reach #f(0 0.0 0) :larm :rotation-axis t)
(transmit-posture *robot*)
(send *ri* :stop-grasp)
(send *ri* :wait-interpolation)

(speak-jp "どうぞ")

(send *ri* :start-grasp)
(wait-for-hand-impact :larm)
(send *ri* :stop-grasp)
